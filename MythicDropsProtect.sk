#name: MythicDropsProtect  by FallenGundam
#version: v1.0.0
#date: 2022/4/7
#required:
    #paper or spigot 1.13.2~1.18.2 
    #mythicmobs 4.9~4.11 (i'm not sure)
    #skript 2.3.7 - lastest
    #skript-reflect
#dc: FallenGundam#8864



options:
    blacklist: "&cWolrdBoss" or "&bWorldBoss2"
    keyword: &0MM



import:
    io.lumine.xikage.mythicmobs.MythicMobs
    io.lumine.xikage.mythicmobs.api.bukkit.events.MythicMobDeathEvent
    io.lumine.xikage.mythicmobs.api.bukkit.events.MythicMobDespawnEvent

on MythicMobDespawnEvent:
    set {_uuid} to event.getEntity().getUniqueId()
    if {mob_damage::%{_uuid}%::*} is set:
        clear {mob_damage::%{_uuid}%::*}


on MythicMobDeathEvent:
    set {_uuid} to event.getEntity().getUniqueId()
    set {_p} to event.getKiller()
    if {mob_damage::%{_uuid}%::*} is set:
        set {_maxvalue} to 0
        set {_maxplayer} to ""
        loop {mob_damage::%{_uuid}%::*}:
            if loop-value > {_maxvalue}:
                set {_maxvalue} to loop-value
                set {_maxplayer} to loop-index
        set {_items} to event.getDrops()

        loop {_items}.size() times:
            set {_index} to (loop-value)-1
            set {_item} to {_items}.get({_index})

            set name of {_item} to "{@keyword}&f[&a%{_maxplayer}%&f] - &r%name of {_item}%"

            #set {_item_name} to {_items}.get({_index}).getItemMeta().getDisplayName()
            #{_items}.get({_index}).getItemMeta().setDisplayName("test")
            add {_item} to {_drops::*}
        event.getDrops().clear()
        drop {_drops::*} at event.getEntity()
        delete {mob_damage::%{_uuid}%::*}


on pickup:
    if name of event-item contains "{@keyword}":
        cancel event
        if name of event-item contains name of player:
            delete event-entity
            set {_it} to event-item
            set {_name} to name of event-item
            replace all "&0MM&f[&a%name of player%&f] - " with "" in {_name}
            set name of {_it} to {_name}
            if player's inventory contains air:
                give {_it} to player
            else:
                drop {_it} at location of player
        #else:
        #	send "&c此物品不屬於你"

on damage:
    if attacker is player:
        if victim isn't player:
            if name of victim isn't {@blacklist}:
                if MythicMobs.inst().getAPIHelper().isMythicMob(victim) = true:
                    set {_uuid} to victim's uuid
                    if {mob_damage::%{_uuid}%::%attacker%} isn't set:
                        set {mob_damage::%{_uuid}%::%attacker%} to 0
                    if damage > victim's health:
                        add victim's health to {mob_damage::%{_uuid}%::%attacker%}
                    else:
                        add damage to {mob_damage::%{_uuid}%::%attacker%}
                    #broadcast "%attacker% : %{mob_damage::%{_uuid}%::%attacker%}*2%"
on skript unload:
    delete {mob_damage::*}


